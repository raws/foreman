#!/usr/bin/env ruby

require "foreman"
require "thor"

class ForemanCLI < Thor
  desc "start [--config PATH] COMMAND", "Start a Foreman server"
  option :config, aliases: ["-c"], banner: "PATH", desc: "Path to a Ruby configuration file"
  long_desc <<-LONGDESC
    `minecraft-foreman start COMMAND` will start a Foreman server by executing the specified Java
    command. For example, to start a vanilla Minecraft server, you might use:

    $ minecraft-foreman start "java -Xms4G -Xmx4G -Xincgc -jar minecraft_server.jar nogui"

    You may also specify a Ruby configuration file to be evaluated in the context of the new server
    before it starts up:

    $ minecraft-foreman start --config init.rb "java -Xms4G -Xmx4G -Xincgc -jar minecraft_server.jar nogui"

    The configuration file has access to the @server variable, which is an instance of
    Foreman::Server. You can use it to set up logging adapters, watchers, and otherwise customize
    server behavior to your whim.
  LONGDESC
  def start(command)
    @server = Foreman::Server.new(command)
    @server.logger.subscribe Foreman::Logging::StdoutAdapter.new do |adapter|
      adapter.level = Logger::INFO
    end

    trap_termination_signals
    load_config

    EventMachine.run do
      @server.start
    end

    restore_terminal_keyboard_output
  end

  private

  def load_config
    if options[:config]
      config_path = File.expand_path(options[:config])
      open(config_path) do |io|
        line_number = 1
        io.each_line do |line|
          eval line, binding, config_path, line_number
          line_number += 1
        end
      end
    end
  end

  def restore_terminal_keyboard_output
    system "stty echo"
  end

  def trap_termination_signals
    %w(INT TERM).each do |signal|
      trap(signal) do
        @server.logger.info "SIG#{signal} received, stopping server...", fields: { signal: signal }
        @server.stop
      end
    end
  end
end

ForemanCLI.start(ARGV)
